"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[4075],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:11},i="Performance tuning",c={unversionedId:"advanced/performance-tuning",id:"advanced/performance-tuning",title:"Performance tuning",description:"The generated C code is usually fast enough, when you compile your code",source:"@site/docs/advanced/performance-tuning.md",sourceDirName:"advanced",slug:"/advanced/performance-tuning",permalink:"/docs/advanced/performance-tuning",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Compile time pseudo variables",permalink:"/docs/advanced/compile-time-pseudo-variables"},next:{title:"Compile-time reflection",permalink:"/docs/advanced/compile-time-reflection"}},l={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"performance-tuning"},"Performance tuning"),(0,o.kt)("p",null,"The generated C code is usually fast enough, when you compile your code\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"-prod"),". There are some situations though, where you may want to give\nadditional hints to the compiler, so that it can further optimize some\nblocks of code."),(0,o.kt)("p",null,"NB: These are ",(0,o.kt)("em",{parentName:"p"},"rarely")," needed, and should not be used, unless you\n",(0,o.kt)("em",{parentName:"p"},"profile your code"),', and then see that there are significant benefits for them.\nTo cite gcc\'s documentation: "programmers are notoriously bad at predicting\nhow their programs actually perform".'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[inline]")," - you can tag functions with ",(0,o.kt)("inlineCode",{parentName:"p"},"[inline]"),", so the C compiler will\ntry to inline them, which in some cases, may be beneficial for performance,\nbut may impact the size of your executable."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[direct_array_access]")," - in functions tagged with ",(0,o.kt)("inlineCode",{parentName:"p"},"[direct_array_access]"),"\nthe compiler will translate array operations directly into C array operations -\nomitting bounds checking. This may save a lot of time in a function that iterates\nover an array but at the cost of making the function unsafe - unless\nthe boundaries will be checked by the user."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"if _likely_(bool expression) {")," this hints the C compiler, that the passed\nboolean expression is very likely to be true, so it can generate assembly\ncode, with less chance of branch misprediction. In the JS backend,\nthat does nothing."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"if _unlikely_(bool expression) {")," similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"_likely_(x)"),", but it hints that\nthe boolean expression is highly improbable. In the JS backend, that does nothing."))}u.isMDXComponent=!0}}]);