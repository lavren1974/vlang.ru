"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[8818],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,k=u["".concat(o,".").concat(c)]||u[c]||d[c]||i;return t?a.createElement(k,l(l({ref:n},m),{},{components:t})):a.createElement(k,l({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:8},l="\u0422\u0438\u043f\u044b",s={unversionedId:"documentation/types",id:"documentation/types",title:"\u0422\u0438\u043f\u044b",description:"\u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b",source:"@site/docs/documentation/types.md",sourceDirName:"documentation",slug:"/documentation/types",permalink:"/docs/documentation/types",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435",permalink:"/docs/documentation/variables"},next:{title:"Module imports",permalink:"/docs/documentation/module-imports"}},o={},p=[{value:"\u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b",id:"\u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435-\u0442\u0438\u043f\u044b",level:2},{value:"\u0421\u0442\u0440\u043e\u043a\u0438",id:"\u0441\u0442\u0440\u043e\u043a\u0438",level:2},{value:"\u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a",id:"\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f-\u0441\u0442\u0440\u043e\u043a",level:2},{value:"String operators",id:"string-operators",level:2},{value:"Runes",id:"runes",level:2},{value:"Numbers",id:"numbers",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Array Fields",id:"array-fields",level:3},{value:"Array Initialization",id:"array-initialization",level:3},{value:"Array Types",id:"array-types",level:3},{value:"Multidimensional Arrays",id:"multidimensional-arrays",level:3},{value:"Array methods",id:"array-methods",level:3},{value:"Sorting Arrays",id:"sorting-arrays",level:4},{value:"Array Slices",id:"array-slices",level:3},{value:"Slices with negative indexes",id:"slices-with-negative-indexes",level:4},{value:"Array method chaining",id:"array-method-chaining",level:3},{value:"Fixed size arrays",id:"fixed-size-arrays",level:2},{value:"Maps",id:"maps",level:2}],m={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u0442\u0438\u043f\u044b"},"\u0422\u0438\u043f\u044b"),(0,r.kt)("h2",{id:"\u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435-\u0442\u0438\u043f\u044b"},"\u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"ignore",ignore:!0},"bool\n\nstring\n\ni8    i16  int  i64      i128 (\u0441\u043a\u043e\u0440\u043e)\nu8    u16  u32  u64      u128 (\u0441\u043a\u043e\u0440\u043e)\n\nrune // \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u0434\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443 Unicode\n\nf32 f64\n\nisize, usize // \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b, \u0440\u0430\u0437\u043c\u0435\u0440 \u2014 \u044d\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442\u043e\u0432, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u0434\u043b\u044f \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u043c\u0435\u0441\u0442\u043e \u0432 \u043f\u0430\u043c\u044f\u0442\u0438.\n\nvoidptr // \u044d\u0442\u043e\u0442 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 C\n\nany // \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 void* \u0432 C \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 Go{}\n")),(0,r.kt)("p",null,"\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 C \u0438 Go, ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," \u044d\u0442\u043e \u0432\u0441\u0435\u0433\u0434\u0430 32-\u0431\u0438\u0442\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e."),(0,r.kt)("p",null,"\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u043f\u0440\u0430\u0432\u0438\u043b\u0430, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432 V \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0442\u0438\u043f\u0430 \u0441 \u043e\u0431\u0435\u0438\u0445 \u0441\u0442\u043e\u0440\u043e\u043d. \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0439 \u0442\u0438\u043f \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u044b\u0448\u0435\u043d, \u0435\u0441\u043b\u0438 \u043e\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u0435. \u042d\u0442\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"   i8 \u2192 i16 \u2192 int \u2192 i64\n                  \u2198     \u2198\n                    f32 \u2192 f64\n                  \u2197     \u2197\n   u8 \u2192 u16 \u2192 u32 \u2192 u64 \u2b0e\n      \u2198     \u2198     \u2198      ptr\n   i8 \u2192 i16 \u2192 int \u2192 i64 \u2b0f\n")),(0,r.kt)("p",null,"\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u043e \u0434\u043e ",(0,r.kt)("inlineCode",{parentName:"p"},"f64")," \u0438\u043b\u0438 , ",(0,r.kt)("inlineCode",{parentName:"p"},"i64")," \u043d\u043e \u043d\u0435 \u0434\u043e ",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),". ( ",(0,r.kt)("inlineCode",{parentName:"p"},"u32")," \u043e\u0437\u043d\u0430\u0447\u0430\u043b\u043e \u0431\u044b \u043f\u043e\u0442\u0435\u0440\u044e \u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439). \u041e\u0434\u043d\u0430\u043a\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," \u043a ",(0,r.kt)("inlineCode",{parentName:"p"},"f32")," \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 (\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u043e\u0442\u0435\u0440\u0435 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439)."),(0,r.kt)("p",null,"\u041b\u0438\u0442\u0435\u0440\u0430\u043b\u044b \u0442\u0438\u043f\u0430 ",(0,r.kt)("inlineCode",{parentName:"p"},"123")," \u0438\u043b\u0438 ",(0,r.kt)("inlineCode",{parentName:"p"},"4.56")," \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043e\u0441\u043e\u0431\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c. \u041e\u043d\u0438 \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442 \u043a \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u044e \u0442\u0438\u043f\u0430, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u043d\u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," \u0438 ",(0,r.kt)("inlineCode",{parentName:"p"},"f64"),", \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0442\u0438\u043f:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"u := u16(12)\nv := 13 + u    // v \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `u16` - \u0431\u0435\u0437 \u043f\u0440\u043e\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\nx := f32(45.6)\ny := x + 3.14  // x \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `f32` - \u0431\u0435\u0437 \u043f\u0440\u043e\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u044f\na := 75        // a \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `int` - \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u0430 int\nb := 14.7      // b \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `f64` - \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439\nc := u + a     // c \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `int` - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `u`\nd := b + x     // d \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f `f64` - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u0440\u043e\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `x`\n")),(0,r.kt)("h2",{id:"\u0441\u0442\u0440\u043e\u043a\u0438"},"\u0421\u0442\u0440\u043e\u043a\u0438"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nassert name.len == 3       // \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 3\nassert name[0] == u8(66) // \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u0430\u0435\u0442 byte, u8(66) == `B`\nassert name[1..3] == 'ob'  // slicing \u0434\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 'ob'\n\n// escape codes\nwindows_newline := '\\r\\n'      // \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u0430\u043a \u0432 C\nassert windows_newline.len == 2\n\n// arbitrary bytes can be directly specified using `\\x##` notation where `#` is\n// a hex digit aardvark_str := '\\x61ardvark' assert aardvark_str == 'aardvark'\nassert '\\xc0'[0] == u8(0xc0)\n\n// or using octal escape `\\###` notation where `#` is an octal digit\naardvark_str2 := '\\141ardvark'\nassert aardvark_str2 == 'aardvark'\n\n// Unicode can be specified directly as `\\u####` where # is a hex digit\n// and will be converted internally to its UTF-8 representation\nstar_str := '\\u2605' // \u2605\nassert star_str == '\u2605'\nassert star_str == '\\xe2\\x98\\x85' // \u0422\u0430\u043a\u0438\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c UTF-8\n")),(0,r.kt)("p",null,"\u0412 V \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442\u043e\u0432, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Unicode \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UTF-8:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := 'hello \ud83c\udf0e' // \u044d\u043c\u043e\u0434\u0437\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 4 \u0431\u0430\u0439\u0442\u0430\nassert s.len == 10\n\narr := s.bytes() // \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c `string` \u0432 `[]u8`\nassert arr.len == 10\n\ns2 := arr.bytestr() // \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c `[]byte` \u0432 `string`\nassert s2 == s\n")),(0,r.kt)("p",null,"\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b. \u0412\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"failcompile",failcompile:!0},"mut s := 'hello \ud83c\udf0e'\ns[0] = `H` // \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u043e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c, s","[i]","\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 V \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b")),(0,r.kt)("p",null,"\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0440\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d ",(0,r.kt)("inlineCode",{parentName:"p"},"byte"),", \u0430 \u043d\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," \u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0439",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0431\u0430\u0439\u0442\u0430\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0430 \u043d\u0435 \u043a\u043e\u0434\u043e\u0432\u044b\u043c \u0442\u043e\u0447\u043a\u0430\u043c Unicode. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c ",(0,r.kt)("inlineCode",{parentName:"p"},"byte")," \u0432 ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},".ascii_str()")," \u043c\u0435\u0442\u043e\u0434:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"country := 'Netherlands'\nprintln(country[0]) // \u0412\u044b\u0432\u043e\u0434: 78\nprintln(country[0].ascii_str()) // \u0412\u044b\u0432\u043e\u0434: N\n")),(0,r.kt)("p",null,"\u0414\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438. \u0414\u043b\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 ",(0,r.kt)("inlineCode",{parentName:"p"},"vfmt")," \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0438."),(0,r.kt)("p",null,"\u0414\u043b\u044f \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},"r"),". \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := r'hello\\nworld' // `\\n` \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u043a\u0430\u043a \u0434\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\nprintln(s) // \"hello\\nworld\"\n")),(0,r.kt)("p",null,"\u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := '42'\nn := s.int() // 42\n\n// \u0432\u0441\u0435 \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u044b int \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f\nassert '0xc3'.int() == 195\nassert '0o10'.int() == 8\nassert '0b1111_0000_1010'.int() == 3850\nassert '-0b1111_0000_1010'.int() == -3850\n")),(0,r.kt)("p",null,"\u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u043c\u043e\u0434\u0443\u043b\u044e\n",(0,r.kt)("a",{parentName:"p",href:"https://modules.vlang.io/strconv.html"},"vlib/strconv"),"."),(0,r.kt)("h2",{id:"\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f-\u0441\u0442\u0440\u043e\u043a"},"\u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a"),(0,r.kt)("p",null,"Basic interpolation syntax is pretty simple - use ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," before a variable name. The variable will be\nconverted to a string and embedded into the literal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nprintln('Hello, $name!') // Hello, Bob!\n")),(0,r.kt)("p",null,"It also works with fields: ",(0,r.kt)("inlineCode",{parentName:"p"},"'age = $user.age'"),". If you need more complex expressions, use ",(0,r.kt)("inlineCode",{parentName:"p"},"${}"),":\n",(0,r.kt)("inlineCode",{parentName:"p"},"'can register = ${user.age > 13}'"),"."),(0,r.kt)("p",null,"Format specifiers similar to those in C's ",(0,r.kt)("inlineCode",{parentName:"p"},"printf()")," are also supported. ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"g"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"o"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),",\netc. are optional and specify the output format. The compiler takes care of the storage size, so\nthere is no ",(0,r.kt)("inlineCode",{parentName:"p"},"hd")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"llu"),"."),(0,r.kt)("p",null,"To use a format specifier, follow this pattern:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${varname:[flags][width][.precision][type]}")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"flags: may be zero or more of the following: ",(0,r.kt)("inlineCode",{parentName:"li"},"-")," to left-align output within the field, ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," to use\n",(0,r.kt)("inlineCode",{parentName:"li"},"0")," as the padding character instead of the default ",(0,r.kt)("inlineCode",{parentName:"li"},"space")," character. (Note: V does not currently\nsupport the use of ",(0,r.kt)("inlineCode",{parentName:"li"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"#")," as format flags, and V supports but doesn't need ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," to right-align\nsince that's the default.)"),(0,r.kt)("li",{parentName:"ul"},"width: may be an integer value describing the minimum width of total field to output."),(0,r.kt)("li",{parentName:"ul"},"precision: an integer value preceded by a ",(0,r.kt)("inlineCode",{parentName:"li"},".")," will guarantee that many digits after the decimal\npoint, if the input variable is a float. Ignored if variable is an integer."),(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("inlineCode",{parentName:"li"},"f")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"F")," specify the input is a float and should be rendered as such, ",(0,r.kt)("inlineCode",{parentName:"li"},"e")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"E")," specify\nthe input is a float and should be rendered as an exponent (partially broken), ",(0,r.kt)("inlineCode",{parentName:"li"},"g")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"G")," specify\nthe input is a float--the renderer will use floating point notation for small values and exponent\nnotation for large values, ",(0,r.kt)("inlineCode",{parentName:"li"},"d")," specifies the input is an integer and should be rendered in base-10\ndigits, ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"X")," require an integer and will render it as hexadecimal digits, ",(0,r.kt)("inlineCode",{parentName:"li"},"o")," requires an\ninteger and will render it as octal digits, ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," requires an integer and will render it as binary\ndigits, ",(0,r.kt)("inlineCode",{parentName:"li"},"s")," requires a string (almost never used).")),(0,r.kt)("p",null,"Note: when a numeric type can render alphabetic characters, such as hex strings or special values\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"infinity"),", the lowercase version of the type forces lowercase alphabetics and the uppercase\nversion forces uppercase alphabetics."),(0,r.kt)("p",null,"Also note: in most cases, it's best to leave the format type empty. Floats will be rendered by\ndefault as ",(0,r.kt)("inlineCode",{parentName:"p"},"g"),", integers will be rendered by default as ",(0,r.kt)("inlineCode",{parentName:"p"},"d"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," is almost always redundant.\nThere are only three cases where specifying a type is recommended:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"format strings are parsed at compile time, so specifying a type can help detect errors then"),(0,r.kt)("li",{parentName:"ul"},"format strings default to using lowercase letters for hex digits and the ",(0,r.kt)("inlineCode",{parentName:"li"},"e")," in exponents. Use a\nuppercase type to force the use of uppercase hex digits and an uppercase ",(0,r.kt)("inlineCode",{parentName:"li"},"E")," in exponents."),(0,r.kt)("li",{parentName:"ul"},"format strings are the most convenient way to get hex, binary or octal strings from an integer.")),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Printf_format_string#Format_placeholder_specification"},"Format Placeholder Specification"),"\nfor more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"x := 123.4567\nprintln('[${x:.2}]') // round to two decimal places => [123.46]\nprintln('[${x:10}]') // right-align with spaces on the left => [   123.457]\nprintln('[${int(x):-10}]') // left-align with spaces on the right => [123       ]\nprintln('[${int(x):010}]') // pad with zeros on the left => [0000000123]\nprintln('[${int(x):b}]') // output as binary => [1111011]\nprintln('[${int(x):o}]') // output as octal => [173]\nprintln('[${int(x):X}]') // output as uppercase hex => [7B]\n\nprintln('[${10.0000:.2}]') // remove insignificant 0s at the end => [10]\nprintln('[${10.0000:.2f}]') // do show the 0s at the end, even though they do not change the number => [10.00]\n")),(0,r.kt)("h2",{id:"string-operators"},"String operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nbobby := name + 'by' // + is used to concatenate strings\nprintln(bobby) // \"Bobby\"\nmut s := 'hello '\ns += 'world' // `+=` is used to append to a string\nprintln(s) // \"hello world\"\n")),(0,r.kt)("p",null,"All operators in V must have values of the same type on both sides. You cannot concatenate an\ninteger to a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"failcompile",failcompile:!0},"age := 10\nprintln('age = ' + age) // not allowed\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"error: infix expr: cannot use ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," (right expression) as ",(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"We have to either convert ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"age := 11\nprintln('age = ' + age.str())\n")),(0,r.kt)("p",null,"or use string interpolation (preferred):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"age := 12\nprintln('age = $age')\n")),(0,r.kt)("h2",{id:"runes"},"Runes"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," represents a single Unicode character and is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),". To denote them, use `\n(backticks) :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," can be converted to a UTF-8 string by using the ",(0,r.kt)("inlineCode",{parentName:"p"},".str()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\nassert rocket.str() == '\ud83d\ude80'\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," can be converted to UTF-8 bytes by using the ",(0,r.kt)("inlineCode",{parentName:"p"},".bytes()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\nassert rocket.bytes() == [u8(0xf0), 0x9f, 0x9a, 0x80]\n")),(0,r.kt)("p",null,"Hex, Unicode, and Octal escape sequences also work in a ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," literal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"assert `\\x61` == `a`\nassert `\\141` == `a`\nassert `\\u0061` == `a`\n\n// multibyte literals work too\nassert `\\u2605` == `\u2605`\nassert `\\u2605`.bytes() == [u8(0xe2), 0x98, 0x85]\nassert `\\xe2\\x98\\x85`.bytes() == [u8(0xe2), 0x98, 0x85]\nassert `\\342\\230\\205`.bytes() == [u8(0xe2), 0x98, 0x85]\n")),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," literals use the same escape syntax as strings, but they can only hold one unicode\ncharacter. Therefore, if your code does not specify a single Unicode character, you will receive an\nerror at compile time."),(0,r.kt)("p",null,"Also remember that strings are indexed as bytes, not runes, so beware:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"rocket_string := '\ud83d\ude80'\nassert rocket_string[0] != `\ud83d\ude80`\nassert 'aloha!'[0] == `a`\n")),(0,r.kt)("p",null,"A string can be converted to runes by the ",(0,r.kt)("inlineCode",{parentName:"p"},".runes()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"hello := 'Hello World \ud83d\udc4b'\nhello_runes := hello.runes() // [`H`, `e`, `l`, `l`, `o`, ` `, `W`, `o`, `r`, `l`, `d`, ` `, `\ud83d\udc4b`]\nassert hello_runes.string() == hello\n")),(0,r.kt)("h2",{id:"numbers"},"Numbers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"a := 123\n")),(0,r.kt)("p",null,"This will assign the value of 123 to ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),". By default ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," will have the\ntype ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,r.kt)("p",null,"You can also use hexadecimal, binary or octal notation for integer literals:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"a := 0x7B\nb := 0b01111011\nc := 0o173\n")),(0,r.kt)("p",null,"All of these will be assigned the same value, 123. They will all have type\n",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", no matter what notation you used."),(0,r.kt)("p",null,"V also supports writing numbers with ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," as separator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"num := 1_000_000 // same as 1000000\nthree := 0b0_11 // same as 0b11\nfloat_num := 3_122.55 // same as 3122.55\nhexa := 0xF_F // same as 255\noct := 0o17_3 // same as 0o173\n")),(0,r.kt)("p",null,"If you want a different type of integer, you can use casting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"a := i64(123)\nb := u8(42)\nc := i16(12345)\n")),(0,r.kt)("p",null,"Assigning floating point numbers works the same way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"f := 1.0\nf1 := f64(3.14)\nf2 := f32(3.14)\n")),(0,r.kt)("p",null,"If you do not specify the type explicitly, by default float literals\nwill have the type of ",(0,r.kt)("inlineCode",{parentName:"p"},"f64"),"."),(0,r.kt)("p",null,"Float literals can also be declared as a power of ten:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"f0 := 42e1 // 420\nf1 := 123e-2 // 1.23\nf2 := 456e+2 // 45600\n")),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"An array is a collection of data elements of the same type. An array literal is a\nlist of expressions surrounded by square brackets. An individual element can be\naccessed using an ",(0,r.kt)("em",{parentName:"p"},"index")," expression. Indexes start from ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut nums := [1, 2, 3]\nprintln(nums) // `[1, 2, 3]`\nprintln(nums[0]) // `1`\nprintln(nums[1]) // `2`\n\nnums[1] = 5\nprintln(nums) // `[1, 5, 3]`\n")),(0,r.kt)("a",{id:"array-operations"}),(0,r.kt)("p",null,"An element can be appended to the end of an array using the push operator ",(0,r.kt)("inlineCode",{parentName:"p"},"<<"),".\nIt can also append an entire array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},'mut nums := [1, 2, 3]\nnums << 4\nprintln(nums) // "[1, 2, 3, 4]"\n\n// append array\nnums << [5, 6, 7]\nprintln(nums) // "[1, 2, 3, 4, 5, 6, 7]"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut names := ['John']\nnames << 'Peter'\nnames << 'Sam'\n// names << 10  <-- This will not compile. `names` is an array of strings.\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"val in array")," returns true if the array contains ",(0,r.kt)("inlineCode",{parentName:"p"},"val"),". See ",(0,r.kt)("a",{parentName:"p",href:"./statements-expressions#in-operator"},(0,r.kt)("inlineCode",{parentName:"a"},"in")," operator"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"names := ['John', 'Peter', 'Sam']\nprintln('Alex' in names) // \"false\"\n")),(0,r.kt)("h3",{id:"array-fields"},"Array Fields"),(0,r.kt)("p",null,'There are two fields that control the "size" of an array:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"len"),": ",(0,r.kt)("em",{parentName:"li"},"length")," - the number of pre-allocated and initialized elements in the array"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cap"),": ",(0,r.kt)("em",{parentName:"li"},"capacity")," - the amount of memory space which has been reserved for elements,\nbut not initialized or counted as elements. The array can grow up to this size without\nbeing reallocated. Usually, V takes care of this field automatically but there are\ncases where the user may want to do manual optimizations (see ",(0,r.kt)("a",{parentName:"li",href:"#array-initialization"},"below"),").")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},'mut nums := [1, 2, 3]\nprintln(nums.len) // "3"\nprintln(nums.cap) // "3" or greater\nnums = [] // The array is now empty\nprintln(nums.len) // "0"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"data")," is a field (of type ",(0,r.kt)("inlineCode",{parentName:"p"},"voidptr"),") with the address of the first\nelement. This is for low-level ",(0,r.kt)("a",{parentName:"p",href:"../advanced/memory-unsafe-code"},(0,r.kt)("inlineCode",{parentName:"a"},"unsafe"))," code."),(0,r.kt)("p",null,"Note that the fields are read-only and can't be modified by the user."),(0,r.kt)("h3",{id:"array-initialization"},"Array Initialization"),(0,r.kt)("p",null,"The type of an array is determined by the first element:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]")," is an array of ints (",(0,r.kt)("inlineCode",{parentName:"li"},"[]int"),")."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"['a', 'b']")," is an array of strings (",(0,r.kt)("inlineCode",{parentName:"li"},"[]string"),").")),(0,r.kt)("p",null,"The user can explicitly specify the type for the first element: ",(0,r.kt)("inlineCode",{parentName:"p"},"[u8(16), 32, 64, 128]"),".\nV arrays are homogeneous (all elements must have the same type).\nThis means that code like ",(0,r.kt)("inlineCode",{parentName:"p"},"[1, 'a']")," will not compile."),(0,r.kt)("p",null,"The above syntax is fine for a small number of known elements but for very large or empty\narrays there is a second initialization syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := []int{len: 10000, cap: 30000, init: 3}\n")),(0,r.kt)("p",null,"This creates an array of 10000 ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," elements that are all initialized with ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),". Memory\nspace is reserved for 30000 elements. The parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"len"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"cap")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," are optional;\n",(0,r.kt)("inlineCode",{parentName:"p"},"len")," defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," to the default initialization of the element type (",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"\nfor numerical type, ",(0,r.kt)("inlineCode",{parentName:"p"},"''")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", etc). The run time system makes sure that the\ncapacity is not smaller than ",(0,r.kt)("inlineCode",{parentName:"p"},"len")," (even if a smaller value is specified explicitly):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"arr := []int{len: 5, init: -1}\n// `arr == [-1, -1, -1, -1, -1]`, arr.cap == 5\n\n// Declare an empty array:\nusers := []int{}\n")),(0,r.kt)("p",null,"Setting the capacity improves performance of pushing elements to the array\nas reallocations can be avoided:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut numbers := []int{cap: 1000}\nprintln(numbers.len) // 0\n// Now appending elements won't reallocate\nfor i in 0 .. 1000 {\n    numbers << i\n}\n")),(0,r.kt)("p",null,"Note: The above code uses a ",(0,r.kt)("a",{parentName:"p",href:"./statements-expressions#range-for"},"range ",(0,r.kt)("inlineCode",{parentName:"a"},"for"))," statement."),(0,r.kt)("p",null,"You can initialize the array by accessing the ",(0,r.kt)("inlineCode",{parentName:"p"},"it")," variable which gives\nthe index as shown here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"count := []int{len: 4, init: it}\nassert count == [0, 1, 2, 3]\n\nmut square := []int{len: 6, init: it * it}\n// square == [0, 1, 4, 9, 16, 25]\n")),(0,r.kt)("h3",{id:"array-types"},"Array Types"),(0,r.kt)("p",null,"An array can be of these types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Example Definition"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]int,[]i64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]string"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Rune"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]rune"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]bool"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[][]int"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MyStructName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Channel"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]chan f64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MyFunctionType")," ",(0,r.kt)("inlineCode",{parentName:"td"},"[]fn (int) bool"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Interface"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MyInterfaceName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sum Type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MySumTypeName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Generic Type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]T"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Map"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]map[string]f64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Enum"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MyEnumType"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Alias"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]MyAliasTypeName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Thread"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]thread int"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Reference"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]&f64"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Shared"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[]shared MyStructType"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example Code:")),(0,r.kt)("p",null,"This example uses ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/structs"},"Structs")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/documentation/type-declarations#sum-types"},"Sum Types")," to create an array\nwhich can handle different types (e.g. Points, Lines) of data elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"struct Point {\n    x int\n    y int\n}\n\nstruct Line {\n    p1 Point\n    p2 Point\n}\n\ntype ObjectSumType = Line | Point\n\nmut object_list := []ObjectSumType{}\nobject_list << Point{1, 1}\nobject_list << Line{\n    p1: Point{3, 3}\n    p2: Point{4, 4}\n}\ndump(object_list)\n/*\nobject_list: [ObjectSumType(Point{\n    x: 1\n    y: 1\n}), ObjectSumType(Line{\n    p1: Point{\n        x: 3\n        y: 3\n    }\n    p2: Point{\n        x: 4\n        y: 4\n    }\n})]\n*/\n")),(0,r.kt)("h3",{id:"multidimensional-arrays"},"Multidimensional Arrays"),(0,r.kt)("p",null,"Arrays can have more than one dimension."),(0,r.kt)("p",null,"2d array example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := [][]int{len: 2, init: []int{len: 3}}\na[0][1] = 2\nprintln(a) // [[0, 2, 0], [0, 0, 0]]\n")),(0,r.kt)("p",null,"3d array example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := [][][]int{len: 2, init: [][]int{len: 3, init: []int{len: 2}}}\na[0][1][1] = 2\nprintln(a) // [[[0, 0], [0, 2], [0, 0]], [[0, 0], [0, 0], [0, 0]]]\n")),(0,r.kt)("h3",{id:"array-methods"},"Array methods"),(0,r.kt)("p",null,"All arrays can be easily printed with ",(0,r.kt)("inlineCode",{parentName:"p"},"println(arr)")," and converted to a string\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"s := arr.str()"),"."),(0,r.kt)("p",null,"Copying the data from the array is done with ",(0,r.kt)("inlineCode",{parentName:"p"},".clone()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"nums := [1, 2, 3]\nnums_copy := nums.clone()\n")),(0,r.kt)("p",null,"Arrays can be efficiently filtered and mapped with the ",(0,r.kt)("inlineCode",{parentName:"p"},".filter()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},".map()")," methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"nums := [1, 2, 3, 4, 5, 6]\neven := nums.filter(it % 2 == 0)\nprintln(even) // [2, 4, 6]\n// filter can accept anonymous functions\neven_fn := nums.filter(fn (x int) bool {\n    return x % 2 == 0\n})\nprintln(even_fn)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"words := ['hello', 'world']\nupper := words.map(it.to_upper())\nprintln(upper) // ['HELLO', 'WORLD']\n// map can also accept anonymous functions\nupper_fn := words.map(fn (w string) string {\n    return w.to_upper()\n})\nprintln(upper_fn) // ['HELLO', 'WORLD']\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"it")," is a builtin variable which refers to the element currently being\nprocessed in filter/map methods."),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},".any()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".all()")," can be used to conveniently test\nfor elements that satisfy a condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"nums := [1, 2, 3]\nprintln(nums.any(it == 2)) // true\nprintln(nums.all(it >= 2)) // false\n")),(0,r.kt)("p",null,"There are further built-in methods for arrays:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.repeat(n)")," concatenates the array elements ",(0,r.kt)("inlineCode",{parentName:"li"},"n")," times"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.insert(i, val)")," inserts a new element ",(0,r.kt)("inlineCode",{parentName:"li"},"val")," at index ",(0,r.kt)("inlineCode",{parentName:"li"},"i")," and\nshifts all following elements to the right"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.insert(i, [3, 4, 5])")," inserts several elements"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.prepend(val)")," inserts a value at the beginning, equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"a.insert(0, val)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.prepend(arr)")," inserts elements of array ",(0,r.kt)("inlineCode",{parentName:"li"},"arr")," at the beginning"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.trim(new_len)")," truncates the length (if ",(0,r.kt)("inlineCode",{parentName:"li"},"new_length < a.len"),", otherwise does nothing)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.clear()")," empties the array without changing ",(0,r.kt)("inlineCode",{parentName:"li"},"cap")," (equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"a.trim(0)"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.delete_many(start, size)")," removes ",(0,r.kt)("inlineCode",{parentName:"li"},"size")," consecutive elements from index ",(0,r.kt)("inlineCode",{parentName:"li"},"start"),"\u2013"," triggers reallocation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.delete(index)")," equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"a.delete_many(index, 1)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.delete_last()")," removes the last element"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.first()")," equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"a[0]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.last()")," equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"a[a.len - 1]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.pop()")," removes the last element and returns it"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.reverse()")," makes a new array with the elements of ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," in reverse order"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.reverse_in_place()")," reverses the order of elements in ",(0,r.kt)("inlineCode",{parentName:"li"},"a")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.join(joiner)")," concatenates an array of strings into one string\nusing ",(0,r.kt)("inlineCode",{parentName:"li"},"joiner")," string as a separator")),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"https://modules.vlang.io/arrays.html"},"vlib/arrays"),"."),(0,r.kt)("h4",{id:"sorting-arrays"},"Sorting Arrays"),(0,r.kt)("p",null,"Sorting arrays of all kinds is very simple and intuitive. Special variables ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"\nare used when providing a custom sorting condition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut numbers := [1, 3, 2]\nnumbers.sort() // 1, 2, 3\nnumbers.sort(a > b) // 3, 2, 1\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"struct User {\n    age  int\n    name string\n}\n\nmut users := [User{21, 'Bob'}, User{20, 'Zarkon'}, User{25, 'Alice'}]\nusers.sort(a.age < b.age) // sort by User.age int field\nusers.sort(a.name > b.name) // reverse sort by User.name string field\n")),(0,r.kt)("p",null,"V also supports custom sorting, through the ",(0,r.kt)("inlineCode",{parentName:"p"},"sort_with_compare")," array method.\nWhich expects a comparing function which will define the sort order.\nUseful for sorting on multiple fields at the same time by custom sorting rules.\nThe code below sorts the array ascending on ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and descending ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"struct User {\n    age  int\n    name string\n}\n\nmut users := [User{21, 'Bob'}, User{65, 'Bob'}, User{25, 'Alice'}]\n\ncustom_sort_fn := fn (a &User, b &User) int {\n    // return -1 when a comes before b\n    // return 0, when both are in same order\n    // return 1 when b comes before a\n    if a.name == b.name {\n        if a.age < b.age {\n            return 1\n        }\n        if a.age > b.age {\n            return -1\n        }\n        return 0\n    }\n    if a.name < b.name {\n        return -1\n    } else if a.name > b.name {\n        return 1\n    }\n    return 0\n}\nusers.sort_with_compare(custom_sort_fn)\n")),(0,r.kt)("h3",{id:"array-slices"},"Array Slices"),(0,r.kt)("p",null,"A slice is a part of a parent array. Initially it refers to the elements\nbetween two indices separated by a ",(0,r.kt)("inlineCode",{parentName:"p"},"..")," operator. The right-side index must\nbe greater than or equal to the left side index."),(0,r.kt)("p",null,"If a right-side index is absent, it is assumed to be the array length. If a\nleft-side index is absent, it is assumed to be 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"nums := [0, 10, 20, 30, 40]\nprintln(nums[1..4]) // [10, 20, 30]\nprintln(nums[..4]) // [0, 10, 20, 30]\nprintln(nums[1..]) // [10, 20, 30, 40]\n")),(0,r.kt)("p",null,"In V slices are arrays themselves (they are not distinct types). As a result\nall array operations may be performed on them. E.g. they can be pushed onto an\narray of the same type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"array_1 := [3, 5, 4, 7, 6]\nmut array_2 := [0, 1]\narray_2 << array_1[..3]\nprintln(array_2) // `[0, 1, 3, 5, 4]`\n")),(0,r.kt)("p",null,"A slice is always created with the smallest possible capacity ",(0,r.kt)("inlineCode",{parentName:"p"},"cap == len")," (see\n",(0,r.kt)("a",{parentName:"p",href:"#array-initialization"},(0,r.kt)("inlineCode",{parentName:"a"},"cap")," above"),") no matter what the capacity or length\nof the parent array is. As a result it is immediately reallocated and copied to another\nmemory location when the size increases thus becoming independent from the\nparent array (",(0,r.kt)("em",{parentName:"p"},"copy on grow"),"). In particular pushing elements to a slice\ndoes not alter the parent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := [0, 1, 2, 3, 4, 5]\nmut b := a[2..4]\nb[0] = 7 // `b[0]` is referring to `a[2]`\nprintln(a) // `[0, 1, 7, 3, 4, 5]`\nb << 9\n// `b` has been reallocated and is now independent from `a`\nprintln(a) // `[0, 1, 7, 3, 4, 5]` - no change\nprintln(b) // `[7, 3, 9]`\n")),(0,r.kt)("p",null,"Appending to the parent array may or may not make it independent from its child slices.\nThe behaviour depends on the parent's capacity and is predictable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := []int{len: 5, cap: 6, init: 2}\nmut b := a[1..4]\na << 3\n// no reallocation - fits in `cap`\nb[2] = 13 // `a[3]` is modified\na << 4\n// a has been reallocated and is now independent from `b` (`cap` was exceeded)\nb[1] = 3 // no change in `a`\nprintln(a) // `[2, 2, 2, 13, 2, 3, 4]`\nprintln(b) // `[2, 3, 13]`\n")),(0,r.kt)("p",null,"You can call .clone() on the slice, if you do want to have an independent copy right away:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut a := [0, 1, 2, 3, 4, 5]\nmut b := a[2..4].clone()\nb[0] = 7 // NB: `b[0]` is NOT referring to `a[2]`, as it would have been, without the .clone()\nprintln(a) // [0, 1, 2, 3, 4, 5]\nprintln(b) // [7, 3]\n")),(0,r.kt)("h4",{id:"slices-with-negative-indexes"},"Slices with negative indexes"),(0,r.kt)("p",null,"V supports array and string slices with negative indexes.\nNegative indexing starts from the end of the array towards the start,\nfor example ",(0,r.kt)("inlineCode",{parentName:"p"},"-3")," is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"array.len - 3"),".\nNegative slices have a different syntax from normal slices, i.e. you need\nto add a ",(0,r.kt)("inlineCode",{parentName:"p"},"gate")," between the array name and the square bracket: ",(0,r.kt)("inlineCode",{parentName:"p"},"a#[..-3]"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"gate"),' specifies that this is a different type of slice and remember that\nthe result is "locked" inside the array.\nThe returned slice is always a valid array, though it may be empty:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"a := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprintln(a#[-3..]) // [7, 8, 9]\nprintln(a#[-20..]) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprintln(a#[-20..-8]) // [0, 1]\nprintln(a#[..-3]) // [0, 1, 2, 3, 4, 5, 6]\n\n// empty arrays\nprintln(a#[-20..-10]) // []\nprintln(a#[20..10]) // []\nprintln(a#[20..30]) // []\n")),(0,r.kt)("h3",{id:"array-method-chaining"},"Array method chaining"),(0,r.kt)("p",null,"You can chain the calls of array methods like ",(0,r.kt)("inlineCode",{parentName:"p"},".filter()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".map()")," and use\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"it")," built-in variable to achieve a classic ",(0,r.kt)("inlineCode",{parentName:"p"},"map/filter")," functional paradigm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"// using filter, map and negatives array slices\nfiles := ['pippo.jpg', '01.bmp', '_v.txt', 'img_02.jpg', 'img_01.JPG']\nfiltered := files.filter(it#[-4..].to_lower() == '.jpg').map(it.to_upper())\n// ['PIPPO.JPG', 'IMG_02.JPG', 'IMG_01.JPG']\n")),(0,r.kt)("h2",{id:"fixed-size-arrays"},"Fixed size arrays"),(0,r.kt)("p",null,"V also supports arrays with fixed size. Unlike ordinary arrays, their\nlength is constant. You cannot append elements to them, nor shrink them.\nYou can only modify their elements in place."),(0,r.kt)("p",null,"However, access to the elements of fixed size arrays is more efficient,\nthey need less memory than ordinary arrays, and unlike ordinary arrays,\ntheir data is on the stack, so you may want to use them as buffers if you\ndo not want additional heap allocations."),(0,r.kt)("p",null,"Most methods are defined to work on ordinary arrays, not on fixed size arrays.\nYou can convert a fixed size array to an ordinary array with slicing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut fnums := [3]int{} // fnums is a fixed size array with 3 elements.\nfnums[0] = 1\nfnums[1] = 10\nfnums[2] = 100\nprintln(fnums) // => [1, 10, 100]\nprintln(typeof(fnums).name) // => [3]int\n\nfnums2 := [1, 10, 100]! // short init syntax that does the same (the syntax will probably change)\n\nanums := fnums[..] // same as `anums := fnums[0..fnums.len]`\nprintln(anums) // => [1, 10, 100]\nprintln(typeof(anums).name) // => []int\n")),(0,r.kt)("p",null,"Note that slicing will cause the data of the fixed size array to be copied to\nthe newly created ordinary array."),(0,r.kt)("h2",{id:"maps"},"Maps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mut m := map[string]int{} // a map with `string` keys and `int` values\nm['one'] = 1\nm['two'] = 2\nprintln(m['one']) // \"1\"\nprintln(m['bad_key']) // \"0\"\nprintln('bad_key' in m) // Use `in` to detect whether such key exists\nprintln(m.keys()) // ['one', 'two']\nm.delete('two')\n")),(0,r.kt)("p",null,"Maps can have keys of type string, rune, integer, float or voidptr."),(0,r.kt)("p",null,"The whole map can be initialized using this short syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"numbers := {\n    'one': 1\n    'two': 2\n}\nprintln(numbers)\n")),(0,r.kt)("p",null,"If a key is not found, a zero value is returned by default:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"sm := {\n    'abc': 'xyz'\n}\nval := sm['bad_key']\nprintln(val) // ''\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"intm := {\n    1: 1234\n    2: 5678\n}\ns := intm[3]\nprintln(s) // 0\n")),(0,r.kt)("p",null,"It's also possible to use an ",(0,r.kt)("inlineCode",{parentName:"p"},"or {}")," block to handle missing keys:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"mm := map[string]int{}\nval := mm['bad_key'] or { panic('key not found') }\n")),(0,r.kt)("p",null,"You can also check, if a key is present, and get its value, if it was present, in one go:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"m := {\n    'abc': 'def'\n}\nif v := m['abc'] {\n    println('the map value for that key is: $v')\n}\n")),(0,r.kt)("p",null,"The same optional check applies to arrays:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"arr := [1, 2, 3]\nlarge_index := 999\nval := arr[large_index] or { panic('out of bounds') }\nprintln(val)\n// you can also do this, if you want to *propagate* the access error:\nval2 := arr[333]?\nprintln(val2)\n")),(0,r.kt)("p",null,"Maps are ordered by insertion, like dictionaries in Python. The order is a\nguaranteed language feature. This may change in the future."))}d.isMDXComponent=!0}}]);