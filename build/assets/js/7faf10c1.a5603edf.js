"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[6532],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,a(a({ref:n},l),{},{components:t})):r.createElement(m,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2537:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:22},a="JSON",s={unversionedId:"documentation/json",id:"documentation/json",title:"JSON",description:"Because of the ubiquitous nature of JSON, support for it is built directly into V.",source:"@site/docs/documentation/json.md",sourceDirName:"documentation",slug:"/documentation/json",permalink:"/docs/documentation/json",draft:!1,tags:[],version:"current",sidebarPosition:22,frontMatter:{sidebar_position:22},sidebar:"tutorialSidebar",previous:{title:"Concurrency",permalink:"/docs/documentation/concurrency"},next:{title:"Testing",permalink:"/docs/documentation/testing"}},c={},u=[{value:"Decoding JSON",id:"decoding-json",level:2},{value:"Encoding JSON",id:"encoding-json",level:2}],l={toc:u};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"json"},"JSON"),(0,o.kt)("p",null,"Because of the ubiquitous nature of JSON, support for it is built directly into V."),(0,o.kt)("p",null,"V generates code for JSON encoding and decoding.\nNo runtime reflection is used. This results in much better performance."),(0,o.kt)("h2",{id:"decoding-json"},"Decoding JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-v"},'import json\n\nstruct Foo {\n    x int\n}\n\nstruct User {\n    // Adding a [required] attribute will make decoding fail, if that\n    // field is not present in the input.\n    // If a field is not [required], but is missing, it will be assumed\n    // to have its default value, like 0 for numbers, or \'\' for strings,\n    // and decoding will not fail.\n    name string [required]\n    age  int\n    // Use the `skip` attribute to skip certain fields\n    foo Foo [skip]\n    // If the field name is different in JSON, it can be specified\n    last_name string [json: lastName]\n}\n\ndata := \'{ "name": "Frodo", "lastName": "Baggins", "age": 25 }\'\nuser := json.decode(User, data) or {\n    eprintln(\'Failed to decode json, error: $err\')\n    return\n}\nprintln(user.name)\nprintln(user.last_name)\nprintln(user.age)\n// You can also decode JSON arrays:\nsfoos := \'[{"x":123},{"x":456}]\'\nfoos := json.decode([]Foo, sfoos)?\nprintln(foos[0].x)\nprintln(foos[1].x)\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"json.decode")," function takes two arguments:\nthe first is the type into which the JSON value should be decoded and\nthe second is a string containing the JSON data."),(0,o.kt)("h2",{id:"encoding-json"},"Encoding JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-v"},'import json\n\nstruct User {\n    name  string\n    score i64\n}\n\nmut data := map[string]int{}\nuser := &User{\n    name: \'Pierre\'\n    score: 1024\n}\n\ndata[\'x\'] = 42\ndata[\'y\'] = 360\n\nprintln(json.encode(data)) // {"x":42,"y":360}\nprintln(json.encode(user)) // {"name":"Pierre","score":1024}\n')))}d.isMDXComponent=!0}}]);