"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[4576],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=s,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_position:23},i="Testing",o={unversionedId:"documentation/Testing",id:"documentation/Testing",title:"Testing",description:"Asserts",source:"@site/docs/documentation/Testing.md",sourceDirName:"documentation",slug:"/documentation/Testing",permalink:"/docs/documentation/Testing",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/Testing.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"JSON",permalink:"/docs/documentation/Json"},next:{title:"Memory management",permalink:"/docs/documentation/Memory-management"}},l={},u=[{value:"Asserts",id:"asserts",level:2},{value:"Asserts with an extra message",id:"asserts-with-an-extra-message",level:2},{value:"Test files",id:"test-files",level:2},{value:"Running tests",id:"running-tests",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing"},"Testing"),(0,s.kt)("h2",{id:"asserts"},"Asserts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v"},"fn foo(mut v []int) {\n    v[0] = 1\n}\n\nmut v := [20]\nfoo(mut v)\nassert v[0] < 4\n")),(0,s.kt)("p",null,"An ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," statement checks that its expression evaluates to ",(0,s.kt)("inlineCode",{parentName:"p"},"true"),". If an assert fails,\nthe program will abort. Asserts should only be used to detect programming errors. When an\nassert fails it is reported to ",(0,s.kt)("em",{parentName:"p"},"stderr"),", and the values on each side of a comparison operator\n(such as ",(0,s.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"=="),") will be printed when possible. This is useful to easily find an\nunexpected value. Assert statements can be used in any function."),(0,s.kt)("h2",{id:"asserts-with-an-extra-message"},"Asserts with an extra message"),(0,s.kt)("p",null,"This form of the ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," statement, will print the extra message when it fails. Note, that\nyou can use any string expression there - string literals, functions returning a string,\nstrings that interpolate variables, etc."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v"},"fn test_assertion_with_extra_message_failure() {\n    for i in 0 .. 100 {\n        assert i * 2 - 45 < 75 + 10, 'assertion failed for i: $i'\n    }\n}\n")),(0,s.kt)("h2",{id:"test-files"},"Test files"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v"},"// hello.v\nmodule main\n\nfn hello() string {\n    return 'Hello world'\n}\n\nfn main() {\n    println(hello())\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v",metastring:"failcompile",failcompile:!0},"// hello_test.v\nmodule main\n\nfn test_hello() {\n    assert hello() == 'Hello world'\n}\n")),(0,s.kt)("p",null,"To run the test above, use ",(0,s.kt)("inlineCode",{parentName:"p"},"v hello_test.v"),". This will check that the function ",(0,s.kt)("inlineCode",{parentName:"p"},"hello")," is\nproducing the correct output. V executes all test functions in the file."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"All test functions have to be inside a test file whose name ends in ",(0,s.kt)("inlineCode",{parentName:"li"},"_test.v"),"."),(0,s.kt)("li",{parentName:"ul"},"Test function names must begin with ",(0,s.kt)("inlineCode",{parentName:"li"},"test_")," to mark them for execution."),(0,s.kt)("li",{parentName:"ul"},"Normal functions can also be defined in test files, and should be called manually. Other\nsymbols can also be defined in test files e.g. types."),(0,s.kt)("li",{parentName:"ul"},"There are two kinds of tests: external and internal."),(0,s.kt)("li",{parentName:"ul"},"Internal tests must ",(0,s.kt)("em",{parentName:"li"},"declare")," their module, just like all other .v\nfiles from the same module. Internal tests can even call private functions in\nthe same module."),(0,s.kt)("li",{parentName:"ul"},"External tests must ",(0,s.kt)("em",{parentName:"li"},"import")," the modules which they test. They do not\nhave access to the private functions/types of the modules. They can test only\nthe external/public API that a module provides.")),(0,s.kt)("p",null,"In the example above, ",(0,s.kt)("inlineCode",{parentName:"p"},"test_hello")," is an internal test, that can call\nthe private function ",(0,s.kt)("inlineCode",{parentName:"p"},"hello()")," because ",(0,s.kt)("inlineCode",{parentName:"p"},"hello_test.v")," has ",(0,s.kt)("inlineCode",{parentName:"p"},"module main"),",\njust like ",(0,s.kt)("inlineCode",{parentName:"p"},"hello.v"),", i.e. both are part of the same module. Note also that\nsince ",(0,s.kt)("inlineCode",{parentName:"p"},"module main")," is a regular module like the others, internal tests can\nbe used to test private functions in your main program .v files too."),(0,s.kt)("p",null,"You can also define these special test functions in a test file:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"testsuite_begin")," which will be run ",(0,s.kt)("em",{parentName:"li"},"before")," all other test functions."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"testsuite_end")," which will be run ",(0,s.kt)("em",{parentName:"li"},"after")," all other test functions.")),(0,s.kt)("p",null,"If a test function has an error return type, any propagated errors will fail the test:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v"},"import strconv\n\nfn test_atoi() ? {\n    assert strconv.atoi('1')? == 1\n    assert strconv.atoi('one')? == 1 // test will fail\n}\n")),(0,s.kt)("h3",{id:"running-tests"},"Running tests"),(0,s.kt)("p",null,"To run test functions in an individual test file, use ",(0,s.kt)("inlineCode",{parentName:"p"},"v foo_test.v"),"."),(0,s.kt)("p",null,"To test an entire module, use ",(0,s.kt)("inlineCode",{parentName:"p"},"v test mymodule"),". You can also use ",(0,s.kt)("inlineCode",{parentName:"p"},"v test .")," to test\neverything inside your current folder (and subfolders). You can pass the ",(0,s.kt)("inlineCode",{parentName:"p"},"-stats"),"\noption to see more details about the individual tests run."),(0,s.kt)("p",null,"You can put additional test data, including .v source files in a folder, named\n",(0,s.kt)("inlineCode",{parentName:"p"},"testdata"),", right next to your _test.v files. V's test framework will ",(0,s.kt)("em",{parentName:"p"},"ignore"),"\nsuch folders, while scanning for tests to run. This is useful, if you want to\nput .v files with invalid V source code, or other tests, including known\nfailing ones, that should be run in a specific way/options by a parent _test.v\nfile."),(0,s.kt)("p",null,"NB: the path to the V compiler, is available through @VEXE, so a _test.v\nfile, can easily run ",(0,s.kt)("em",{parentName:"p"},"other")," test files like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-v",metastring:"oksyntax",oksyntax:!0},"import os\n\nfn test_subtest() {\n    res := os.execute('${os.quoted_path(@VEXE)} other_test.v')\n    assert res.exit_code == 1\n    assert res.output.contains('other_test.v does not exist')\n}\n")))}c.isMDXComponent=!0}}]);