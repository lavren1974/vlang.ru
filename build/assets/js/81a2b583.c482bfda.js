"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[5476],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return t?a.createElement(g,l(l({ref:n},d),{},{components:t})):a.createElement(g,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2},l="\u0421\u0442\u0440\u043e\u043a\u0438",o={unversionedId:"types/strings",id:"types/strings",title:"\u0421\u0442\u0440\u043e\u043a\u0438",description:"\u0412 V \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442\u043e\u0432, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Unicode \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UTF-8:",source:"@site/docs/types/strings.md",sourceDirName:"types",slug:"/types/strings",permalink:"/docs/types/strings",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/types/strings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b",permalink:"/docs/types/primitive"},next:{title:"Runes",permalink:"/docs/types/runes"}},s={},p=[{value:"\u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a",id:"\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f-\u0441\u0442\u0440\u043e\u043a",level:2},{value:"String operators",id:"string-operators",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u0441\u0442\u0440\u043e\u043a\u0438"},"\u0421\u0442\u0440\u043e\u043a\u0438"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nassert name.len == 3       // \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0435\u0442 3\nassert name[0] == u8(66) // \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0434\u0430\u0435\u0442 byte, u8(66) == `B`\nassert name[1..3] == 'ob'  // slicing \u0434\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 'ob'\n\n// escape codes\nwindows_newline := '\\r\\n'      // \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043a\u0430\u043a \u0432 C\nassert windows_newline.len == 2\n\n// arbitrary bytes can be directly specified using `\\x##` notation where `#` is\n// a hex digit aardvark_str := '\\x61ardvark' assert aardvark_str == 'aardvark'\nassert '\\xc0'[0] == u8(0xc0)\n\n// or using octal escape `\\###` notation where `#` is an octal digit\naardvark_str2 := '\\141ardvark'\nassert aardvark_str2 == 'aardvark'\n\n// Unicode can be specified directly as `\\u####` where # is a hex digit\n// and will be converted internally to its UTF-8 representation\nstar_str := '\\u2605' // \u2605\nassert star_str == '\u2605'\nassert star_str == '\\xe2\\x98\\x85' // \u0422\u0430\u043a\u0438\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c UTF-8\n")),(0,r.kt)("p",null,"\u0412 V \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0430\u0439\u0442\u043e\u0432, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. \u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b Unicode \u043a\u043e\u0434\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c UTF-8:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := 'hello \ud83c\udf0e' // \u044d\u043c\u043e\u0434\u0437\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 4 \u0431\u0430\u0439\u0442\u0430\nassert s.len == 10\n\narr := s.bytes() // \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c `string` \u0432 `[]u8`\nassert arr.len == 10\n\ns2 := arr.bytestr() // \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c `[]byte` \u0432 `string`\nassert s2 == s\n")),(0,r.kt)("p",null,"\u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b. \u0412\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"failcompile",failcompile:!0},"mut s := 'hello \ud83c\udf0e'\ns[0] = `H` // \u043d\u0435 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u043e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c, s","[i]","\u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u0441\u0442\u0440\u043e\u043a\u0438 V \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b")),(0,r.kt)("p",null,"\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043f\u0440\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d ",(0,r.kt)("inlineCode",{parentName:"p"},"byte"),", \u0430 \u043d\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},"rune")," \u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u043e\u0439",(0,r.kt)("inlineCode",{parentName:"p"},"string"),". \u0418\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0431\u0430\u0439\u0442\u0430\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u0430 \u043d\u0435 \u043a\u043e\u0434\u043e\u0432\u044b\u043c \u0442\u043e\u0447\u043a\u0430\u043c Unicode. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c ",(0,r.kt)("inlineCode",{parentName:"p"},"byte")," \u0432 ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},".ascii_str()")," \u043c\u0435\u0442\u043e\u0434:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"country := 'Netherlands'\nprintln(country[0]) // \u0412\u044b\u0432\u043e\u0434: 78\nprintln(country[0].ascii_str()) // \u0412\u044b\u0432\u043e\u0434: N\n")),(0,r.kt)("p",null,"\u0414\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438. \u0414\u043b\u044f \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u0438 ",(0,r.kt)("inlineCode",{parentName:"p"},"vfmt")," \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0434\u0432\u043e\u0439\u043d\u044b\u0435 \u043a\u0430\u0432\u044b\u0447\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0438\u043c\u0432\u043e\u043b \u043e\u0434\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u0430\u0432\u044b\u0447\u043a\u0438."),(0,r.kt)("p",null,"\u0414\u043b\u044f \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 ",(0,r.kt)("inlineCode",{parentName:"p"},"r"),". \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := r'hello\\nworld' // `\\n` \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u043a\u0430\u043a \u0434\u0432\u0430 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\nprintln(s) // \"hello\\nworld\"\n")),(0,r.kt)("p",null,"\u0421\u0442\u0440\u043e\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043b\u0435\u0433\u043a\u043e \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"s := '42'\nn := s.int() // 42\n\n// \u0432\u0441\u0435 \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u044b int \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f\nassert '0xc3'.int() == 195\nassert '0o10'.int() == 8\nassert '0b1111_0000_1010'.int() == 3850\nassert '-0b1111_0000_1010'.int() == -3850\n")),(0,r.kt)("p",null,"\u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u043c\u043e\u0434\u0443\u043b\u044e\n",(0,r.kt)("a",{parentName:"p",href:"https://modules.vlang.io/strconv.html"},"vlib/strconv"),"."),(0,r.kt)("h2",{id:"\u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f-\u0441\u0442\u0440\u043e\u043a"},"\u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0440\u043e\u043a"),(0,r.kt)("p",null,"Basic interpolation syntax is pretty simple - use ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," before a variable name. The variable will be\nconverted to a string and embedded into the literal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nprintln('Hello, $name!') // Hello, Bob!\n")),(0,r.kt)("p",null,"It also works with fields: ",(0,r.kt)("inlineCode",{parentName:"p"},"'age = $user.age'"),". If you need more complex expressions, use ",(0,r.kt)("inlineCode",{parentName:"p"},"${}"),":\n",(0,r.kt)("inlineCode",{parentName:"p"},"'can register = ${user.age > 13}'"),"."),(0,r.kt)("p",null,"Format specifiers similar to those in C's ",(0,r.kt)("inlineCode",{parentName:"p"},"printf()")," are also supported. ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"g"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"o"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),",\netc. are optional and specify the output format. The compiler takes care of the storage size, so\nthere is no ",(0,r.kt)("inlineCode",{parentName:"p"},"hd")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"llu"),"."),(0,r.kt)("p",null,"To use a format specifier, follow this pattern:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${varname:[flags][width][.precision][type]}")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"flags: may be zero or more of the following: ",(0,r.kt)("inlineCode",{parentName:"li"},"-")," to left-align output within the field, ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," to use\n",(0,r.kt)("inlineCode",{parentName:"li"},"0")," as the padding character instead of the default ",(0,r.kt)("inlineCode",{parentName:"li"},"space")," character. (Note: V does not currently\nsupport the use of ",(0,r.kt)("inlineCode",{parentName:"li"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"#")," as format flags, and V supports but doesn't need ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," to right-align\nsince that's the default.)"),(0,r.kt)("li",{parentName:"ul"},"width: may be an integer value describing the minimum width of total field to output."),(0,r.kt)("li",{parentName:"ul"},"precision: an integer value preceded by a ",(0,r.kt)("inlineCode",{parentName:"li"},".")," will guarantee that many digits after the decimal\npoint, if the input variable is a float. Ignored if variable is an integer."),(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("inlineCode",{parentName:"li"},"f")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"F")," specify the input is a float and should be rendered as such, ",(0,r.kt)("inlineCode",{parentName:"li"},"e")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"E")," specify\nthe input is a float and should be rendered as an exponent (partially broken), ",(0,r.kt)("inlineCode",{parentName:"li"},"g")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"G")," specify\nthe input is a float--the renderer will use floating point notation for small values and exponent\nnotation for large values, ",(0,r.kt)("inlineCode",{parentName:"li"},"d")," specifies the input is an integer and should be rendered in base-10\ndigits, ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"X")," require an integer and will render it as hexadecimal digits, ",(0,r.kt)("inlineCode",{parentName:"li"},"o")," requires an\ninteger and will render it as octal digits, ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," requires an integer and will render it as binary\ndigits, ",(0,r.kt)("inlineCode",{parentName:"li"},"s")," requires a string (almost never used).")),(0,r.kt)("p",null,"Note: when a numeric type can render alphabetic characters, such as hex strings or special values\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"infinity"),", the lowercase version of the type forces lowercase alphabetics and the uppercase\nversion forces uppercase alphabetics."),(0,r.kt)("p",null,"Also note: in most cases, it's best to leave the format type empty. Floats will be rendered by\ndefault as ",(0,r.kt)("inlineCode",{parentName:"p"},"g"),", integers will be rendered by default as ",(0,r.kt)("inlineCode",{parentName:"p"},"d"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"s")," is almost always redundant.\nThere are only three cases where specifying a type is recommended:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"format strings are parsed at compile time, so specifying a type can help detect errors then"),(0,r.kt)("li",{parentName:"ul"},"format strings default to using lowercase letters for hex digits and the ",(0,r.kt)("inlineCode",{parentName:"li"},"e")," in exponents. Use a\nuppercase type to force the use of uppercase hex digits and an uppercase ",(0,r.kt)("inlineCode",{parentName:"li"},"E")," in exponents."),(0,r.kt)("li",{parentName:"ul"},"format strings are the most convenient way to get hex, binary or octal strings from an integer.")),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Printf_format_string#Format_placeholder_specification"},"Format Placeholder Specification"),"\nfor more information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"x := 123.4567\nprintln('[${x:.2}]') // round to two decimal places => [123.46]\nprintln('[${x:10}]') // right-align with spaces on the left => [   123.457]\nprintln('[${int(x):-10}]') // left-align with spaces on the right => [123       ]\nprintln('[${int(x):010}]') // pad with zeros on the left => [0000000123]\nprintln('[${int(x):b}]') // output as binary => [1111011]\nprintln('[${int(x):o}]') // output as octal => [173]\nprintln('[${int(x):X}]') // output as uppercase hex => [7B]\n\nprintln('[${10.0000:.2}]') // remove insignificant 0s at the end => [10]\nprintln('[${10.0000:.2f}]') // do show the 0s at the end, even though they do not change the number => [10.00]\n")),(0,r.kt)("h2",{id:"string-operators"},"String operators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"name := 'Bob'\nbobby := name + 'by' // + is used to concatenate strings\nprintln(bobby) // \"Bobby\"\nmut s := 'hello '\ns += 'world' // `+=` is used to append to a string\nprintln(s) // \"hello world\"\n")),(0,r.kt)("p",null,"All operators in V must have values of the same type on both sides. You cannot concatenate an\ninteger to a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"failcompile",failcompile:!0},"age := 10\nprintln('age = ' + age) // not allowed\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"error: infix expr: cannot use ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," (right expression) as ",(0,r.kt)("inlineCode",{parentName:"p"},"string"))),(0,r.kt)("p",null,"We have to either convert ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," to a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"age := 11\nprintln('age = ' + age.str())\n")),(0,r.kt)("p",null,"or use string interpolation (preferred):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"age := 12\nprintln('age = $age')\n")))}c.isMDXComponent=!0}}]);