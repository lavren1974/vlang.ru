"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[1589],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>p});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(r),p=a,m=f["".concat(s,".").concat(p)]||f[p]||d[p]||i;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8953:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:2},o="Structs with reference fields",c={unversionedId:"advanced/Structs-with-reference-fields",id:"advanced/Structs-with-reference-fields",title:"Structs with reference fields",description:"Structs with references require explicitly setting the initial value to a",source:"@site/docs/advanced/Structs-with-reference-fields.md",sourceDirName:"advanced",slug:"/advanced/Structs-with-reference-fields",permalink:"/docs/advanced/Structs-with-reference-fields",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/Structs-with-reference-fields.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Memory-unsafe code",permalink:"/docs/advanced/Memory-unsafe-code"},next:{title:"sizeof and __offsetof",permalink:"/docs/advanced/sizeof-and-offsetof"}},s={},u=[],l={toc:u};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"structs-with-reference-fields"},"Structs with reference fields"),(0,a.kt)("p",null,"Structs with references require explicitly setting the initial value to a\nreference value unless the struct already defines its own initial value."),(0,a.kt)("p",null,"Zero-value references, or nil pointers, will ",(0,a.kt)("strong",{parentName:"p"},"NOT")," be supported in the future,\nfor now data structures such as Linked Lists or Binary Trees that rely on reference\nfields that can use the value ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", understanding that it is unsafe, and that it can\ncause a panic."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"struct Node {\n    a &Node\n    b &Node = 0 // Auto-initialized to nil, use with caution!\n}\n\n// Reference fields must be initialized unless an initial value is declared.\n// Zero (0) is OK but use with caution, it's a nil pointer.\nfoo := Node{\n    a: 0\n}\nbar := Node{\n    a: &foo\n}\nbaz := Node{\n    a: 0\n    b: 0\n}\nqux := Node{\n    a: &foo\n    b: &bar\n}\nprintln(baz)\nprintln(qux)\n")))}d.isMDXComponent=!0}}]);