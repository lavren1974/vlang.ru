"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[4116],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},i="Memory-unsafe code",l={unversionedId:"advanced/memory-unsafe-code",id:"advanced/memory-unsafe-code",title:"Memory-unsafe code",description:"Sometimes for efficiency you may want to write low-level code that can potentially",source:"@site/docs/advanced/memory-unsafe-code.md",sourceDirName:"advanced",slug:"/advanced/memory-unsafe-code",permalink:"/docs/advanced/memory-unsafe-code",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Advanced Topics",permalink:"/docs/category/advanced-topics"},next:{title:"Structs with reference fields",permalink:"/docs/advanced/structs-with-reference-fields"}},s={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"memory-unsafe-code"},"Memory-unsafe code"),(0,a.kt)("p",null,"Sometimes for efficiency you may want to write low-level code that can potentially\ncorrupt memory or be vulnerable to security exploits. V supports writing such code,\nbut not by default."),(0,a.kt)("p",null,"V requires that any potentially memory-unsafe operations are marked intentionally.\nMarking them also indicates to anyone reading the code that there could be\nmemory-safety violations if there was a mistake."),(0,a.kt)("p",null,"Examples of potentially memory-unsafe operations are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pointer arithmetic"),(0,a.kt)("li",{parentName:"ul"},"Pointer indexing"),(0,a.kt)("li",{parentName:"ul"},"Conversion to pointer from an incompatible type"),(0,a.kt)("li",{parentName:"ul"},"Calling certain C functions, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"free"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"strlen")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"strncmp"),".")),(0,a.kt)("p",null,"To mark potentially memory-unsafe operations, enclose them in an ",(0,a.kt)("inlineCode",{parentName:"p"},"unsafe")," block:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v",metastring:"wip",wip:!0},"// allocate 2 uninitialized bytes & return a reference to them\nmut p := unsafe { malloc(2) }\np[0] = `h` // Error: pointer indexing is only allowed in `unsafe` blocks\nunsafe {\n    p[0] = `h` // OK\n    p[1] = `i`\n}\np++ // Error: pointer arithmetic is only allowed in `unsafe` blocks\nunsafe {\n    p++ // OK\n}\nassert *p == `i`\n")),(0,a.kt)("p",null,"Best practice is to avoid putting memory-safe expressions inside an ",(0,a.kt)("inlineCode",{parentName:"p"},"unsafe")," block,\nso that the reason for using ",(0,a.kt)("inlineCode",{parentName:"p"},"unsafe")," is as clear as possible. Generally any code\nyou think is memory-safe should not be inside an ",(0,a.kt)("inlineCode",{parentName:"p"},"unsafe")," block, so the compiler\ncan verify it."),(0,a.kt)("p",null,"If you suspect your program does violate memory-safety, you have a head start on\nfinding the cause: look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"unsafe")," blocks (and how they interact with\nsurrounding code)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Note: This is work in progress.")))}u.isMDXComponent=!0}}]);