"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[7113],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),f=c(t),p=r,h=f["".concat(l,".").concat(p)]||f[p]||u[p]||i;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:18},o="Attributes",s={unversionedId:"advanced/Attributes",id:"advanced/Attributes",title:"Attributes",description:"V has several attributes that modify the behavior of functions and structs.",source:"@site/docs/advanced/Attributes.md",sourceDirName:"advanced",slug:"/advanced/Attributes",permalink:"/docs/advanced/Attributes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced/Attributes.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"Cross-platform shell scripts in V",permalink:"/docs/advanced/Cross-platform-shell-scripts"},next:{title:"Goto",permalink:"/docs/advanced/Goto"}},l={},c=[],d={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"attributes"},"Attributes"),(0,r.kt)("p",null,"V has several attributes that modify the behavior of functions and structs."),(0,r.kt)("p",null,"An attribute is a compiler instruction specified inside ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," right before a\nfunction/struct/enum declaration and applies only to the following declaration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"// [flag] enables Enum types to be used as bitfields\n\n[flag]\nenum BitField {\n    read\n    write\n    other\n}\n\nfn main() {\n    assert 1 == int(BitField.read)\n    assert 2 == int(BitField.write)\n    mut bf := BitField.read\n    assert bf.has(.read | .other) // test if *at least one* of the flags is set\n    assert !bf.all(.read | .other) // test if *all* of the flags is set\n    bf.set(.write | .other)\n    assert bf.has(.read | .write | .other)\n    assert bf.all(.read | .write | .other)\n    bf.toggle(.other)\n    assert bf == BitField.read | .write\n    assert bf.all(.read | .write)\n    assert !bf.has(.other)\n}\n")),(0,r.kt)("p",null,"Struct field deprecations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"oksyntax",oksyntax:!0},"module abc\n\n// Note that only *direct* accesses to Xyz.d in *other modules*, will produce deprecation notices/warnings:\npub struct Xyz {\npub mut:\n    a int\n    d int [deprecated: 'use Xyz.a instead'; deprecated_after: '2999-03-01'] // produce a notice, the deprecation date is in the far future\n}\n")),(0,r.kt)("p",null,"Function/method deprecations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v"},"// Calling this function will result in a deprecation warning\n[deprecated]\nfn old_function() {\n}\n\n// It can also display a custom deprecation message\n[deprecated: 'use new_function() instead']\nfn legacy_function() {}\n\n// You can also specify a date, after which the function will be\n// considered deprecated. Before that date, calls to the function\n// will be compiler notices - you will see them, but the compilation\n// is not affected. After that date, calls will become warnings,\n// so ordinary compiling will still work, but compiling with -prod\n// will not (all warnings are treated like errors with -prod).\n// 6 months after the deprecation date, calls will be hard\n// compiler errors.\n[deprecated: 'use new_function2() instead']\n[deprecated_after: '2021-05-27']\nfn legacy_function2() {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-v",metastring:"nofmt",nofmt:!0},'// This function\'s calls will be inlined.\n[inline]\nfn inlined_function() {\n}\n\n// This function\'s calls will NOT be inlined.\n[noinline]\nfn function() {\n}\n\n// This function will NOT return to its callers.\n// Such functions can be used at the end of or blocks,\n// just like exit/1 or panic/1. Such functions can not\n// have return types, and should end either in for{}, or\n// by calling other `[noreturn]` functions.\n[noreturn]\nfn forever() {\n    for {}\n}\n\n// The following struct must be allocated on the heap. Therefore, it can only be used as a\n// reference (`&Window`) or inside another reference (`&OuterStruct{ Window{...} }`).\n// See section "Stack and Heap"\n[heap]\nstruct Window {\n}\n\n// V will not generate this function and all its calls if the provided flag is false.\n// To use a flag, use `v -d flag`\n[if debug]\nfn foo() {\n}\n\nfn bar() {\n    foo() // will not be called if `-d debug` is not passed\n}\n\n// The memory pointed to by the pointer arguments of this function will not be\n// freed by the garbage collector (if in use) before the function returns\n[keep_args_alive]\nfn C.my_external_function(voidptr, int, voidptr) int\n\n// Calls to following function must be in unsafe{} blocks.\n// Note that the code in the body of `risky_business()` will still be\n// checked, unless you also wrap it in `unsafe {}` blocks.\n// This is useful, when you want to have an `[unsafe]` function that\n// has checks before/after a certain unsafe operation, that will still\n// benefit from V\'s safety features.\n[unsafe]\nfn risky_business() {\n    // code that will be checked, perhaps checking pre conditions\n    unsafe {\n        // code that *will not be* checked, like pointer arithmetic,\n        // accessing union fields, calling other `[unsafe]` fns, etc...\n        // Usually, it is a good idea to try minimizing code wrapped\n        // in unsafe{} as much as possible.\n        // See also [Memory-unsafe code](#memory-unsafe-code)\n    }\n    // code that will be checked, perhaps checking post conditions and/or\n    // keeping invariants\n}\n\n// V\'s autofree engine will not take care of memory management in this function.\n// You will have the responsibility to free memory manually yourself in it.\n[manualfree]\nfn custom_allocations() {\n}\n\n// For C interop only, tells V that the following struct is defined with `typedef struct` in C\n[typedef]\nstruct C.Foo {\n}\n\n// Used to add a custom calling convention to a function, available calling convention: stdcall, fastcall and cdecl.\n// This list aslo apply for type aliases (see below).\n[callconv: "stdcall"]\nfn C.DefWindowProc(hwnd int, msg int, lparam int, wparam int)\n\n// Used to add a custom calling convention to a function type aliases.\n[callconv: "fastcall"]\ntype FastFn = fn (int) bool\n\n// Windows only:\n// If a default graphics library is imported (ex. gg, ui), then the graphical window takes\n// priority and no console window is created, effectively disabling println() statements.\n// Use to explicitly create console window. Valid before main() only.\n[console]\nfn main() {\n}\n')))}u.isMDXComponent=!0}}]);