"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[7986],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,b=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(b,s(s({ref:t},c),{},{components:n})):r.createElement(b,s({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:25},s="ORM",i={unversionedId:"documentation/orm",id:"documentation/orm",title:"ORM",description:"(This is still in an alpha state)",source:"@site/docs/documentation/orm.md",sourceDirName:"documentation",slug:"/documentation/orm",permalink:"/docs/documentation/orm",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/documentation/orm.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Memory management",permalink:"/docs/documentation/memory-management"},next:{title:"Writing Documentation",permalink:"/docs/documentation/writing-documentation"}},l={},u=[],c={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"orm"},"ORM"),(0,o.kt)("p",null,"(This is still in an alpha state)"),(0,o.kt)("p",null,"V has a built-in ORM (object-relational mapping) which supports SQLite, MySQL and Postgres,\nbut soon it will support MS SQL and Oracle."),(0,o.kt)("p",null,"V's ORM provides a number of benefits:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One syntax for all SQL dialects. (Migrating between databases becomes much easier.)"),(0,o.kt)("li",{parentName:"ul"},"Queries are constructed using V's syntax. (There's no need to learn another syntax.)"),(0,o.kt)("li",{parentName:"ul"},"Safety. (All queries are automatically sanitised to prevent SQL injection.)"),(0,o.kt)("li",{parentName:"ul"},"Compile time checks. (This prevents typos which can only be caught during runtime.)"),(0,o.kt)("li",{parentName:"ul"},"Readability and simplicity. (You don't need to manually parse the results of a query and\nthen manually construct objects from the parsed results.)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-v"},"import sqlite\n\n// sets a custom table name. Default is struct name (case-sensitive)\n[table: 'customers']\nstruct Customer {\n    id        int    [primary; sql: serial] // a field named `id` of integer type must be the first field\n    name      string [nonull]\n    nr_orders int\n    country   string [nonull]\n}\n\ndb := sqlite.connect('customers.db')?\n\n// you can create tables:\n// CREATE TABLE IF NOT EXISTS `Customer` (\n//      `id` INTEGER PRIMARY KEY,\n//      `name` TEXT NOT NULL,\n//      `nr_orders` INTEGER,\n//      `country` TEXT NOT NULL\n// )\nsql db {\n    create table Customer\n}\n\n// select count(*) from customers\nnr_customers := sql db {\n    select count from Customer\n}\nprintln('number of all customers: $nr_customers')\n// V syntax can be used to build queries\nuk_customers := sql db {\n    select from Customer where country == 'uk' && nr_orders > 0\n}\nprintln(uk_customers.len)\nfor customer in uk_customers {\n    println('$customer.id - $customer.name')\n}\n// by adding `limit 1` we tell V that there will be only one object\ncustomer := sql db {\n    select from Customer where id == 1 limit 1\n}\nprintln('$customer.id - $customer.name')\n// insert a new customer\nnew_customer := Customer{\n    name: 'Bob'\n    nr_orders: 10\n}\nsql db {\n    insert new_customer into Customer\n}\n")),(0,o.kt)("p",null,"For more examples and the docs, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vlang/v/tree/master/vlib/orm"},"vlib/orm"),"."))}m.isMDXComponent=!0}}]);