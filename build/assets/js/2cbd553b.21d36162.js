"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[8767],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,y=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6106:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={sidebar_position:3},o="Runes",l={unversionedId:"types/runes",id:"types/runes",title:"Runes",description:"A rune represents a single Unicode character and is an alias for u32. To denote them, use `",source:"@site/docs/types/runes.md",sourceDirName:"types",slug:"/types/runes",permalink:"/docs/types/runes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/types/runes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\u0421\u0442\u0440\u043e\u043a\u0438",permalink:"/docs/types/strings"},next:{title:"Numbers",permalink:"/docs/types/numbers"}},i={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"runes"},"Runes"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"rune")," represents a single Unicode character and is an alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"u32"),". To denote them, use `\n(backticks) :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"rune")," can be converted to a UTF-8 string by using the ",(0,a.kt)("inlineCode",{parentName:"p"},".str()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\nassert rocket.str() == '\ud83d\ude80'\n")),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"rune")," can be converted to UTF-8 bytes by using the ",(0,a.kt)("inlineCode",{parentName:"p"},".bytes()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"rocket := `\ud83d\ude80`\nassert rocket.bytes() == [u8(0xf0), 0x9f, 0x9a, 0x80]\n")),(0,a.kt)("p",null,"Hex, Unicode, and Octal escape sequences also work in a ",(0,a.kt)("inlineCode",{parentName:"p"},"rune")," literal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"assert `\\x61` == `a`\nassert `\\141` == `a`\nassert `\\u0061` == `a`\n\n// multibyte literals work too\nassert `\\u2605` == `\u2605`\nassert `\\u2605`.bytes() == [u8(0xe2), 0x98, 0x85]\nassert `\\xe2\\x98\\x85`.bytes() == [u8(0xe2), 0x98, 0x85]\nassert `\\342\\230\\205`.bytes() == [u8(0xe2), 0x98, 0x85]\n")),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"rune")," literals use the same escape syntax as strings, but they can only hold one unicode\ncharacter. Therefore, if your code does not specify a single Unicode character, you will receive an\nerror at compile time."),(0,a.kt)("p",null,"Also remember that strings are indexed as bytes, not runes, so beware:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"rocket_string := '\ud83d\ude80'\nassert rocket_string[0] != `\ud83d\ude80`\nassert 'aloha!'[0] == `a`\n")),(0,a.kt)("p",null,"A string can be converted to runes by the ",(0,a.kt)("inlineCode",{parentName:"p"},".runes()")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"hello := 'Hello World \ud83d\udc4b'\nhello_runes := hello.runes() // [`H`, `e`, `l`, `l`, `o`, ` `, `W`, `o`, `r`, `l`, `d`, ` `, `\ud83d\udc4b`]\nassert hello_runes.string() == hello\n")))}p.isMDXComponent=!0}}]);