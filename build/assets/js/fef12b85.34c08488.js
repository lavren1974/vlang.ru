"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[1124],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(t),f=i,g=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(g,a(a({ref:n},l),{},{components:t})):r.createElement(g,a({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8019:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:2},a="Appendix II: Operators",p={unversionedId:"appendices/appendix-ii-operators",id:"appendices/appendix-ii-operators",title:"Appendix II: Operators",description:"This lists operators for primitive types only.",source:"@site/docs/appendices/appendix-ii-operators.md",sourceDirName:"appendices",slug:"/appendices/appendix-ii-operators",permalink:"/docs/appendices/appendix-ii-operators",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Appendix I: Keywords",permalink:"/docs/appendices/appendix-i-keywords"},next:{title:"V Documentation",permalink:"/docs/doc-en"}},s={},c=[],l={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"appendix-ii-operators"},"Appendix II: Operators"),(0,i.kt)("p",null,"This lists operators for ",(0,i.kt)("a",{parentName:"p",href:"/docs/documentation/types#primitive-types"},"primitive types")," only."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-v",metastring:"ignore",ignore:!0},"+    sum                    integers, floats, strings\n-    difference             integers, floats\n*    product                integers, floats\n/    quotient               integers, floats\n%    remainder              integers\n\n~    bitwise NOT            integers\n&    bitwise AND            integers\n|    bitwise OR             integers\n^    bitwise XOR            integers\n\n!    logical NOT            bools\n&&   logical AND            bools\n||   logical OR             bools\n!=   logical XOR            bools\n\n<<   left shift             integer << unsigned integer\n>>   right shift            integer >> unsigned integer\n>>>  unsigned right shift   integer >> unsigned integer\n\n\nPrecedence    Operator\n    5            *  /  %  <<  >> >>> &\n    4            +  -  |  ^\n    3            ==  !=  <  <=  >  >=\n    2            &&\n    1            ||\n\n\nAssignment Operators\n+=   -=   *=   /=   %=\n&=   |=   ^=\n>>=  <<=  >>>=\n")))}u.isMDXComponent=!0}}]);