"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[9705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(i,".").concat(f)]||m[f]||c[f]||o;return n?r.createElement(d,l(l({ref:t},u),{},{components:n})):r.createElement(d,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},l="Numbers",s={unversionedId:"types/numbers",id:"types/numbers",title:"Numbers",description:"This will assign the value of 123 to a. By default a will have the",source:"@site/docs/types/numbers.md",sourceDirName:"types",slug:"/types/numbers",permalink:"/docs/types/numbers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/types/numbers.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Runes",permalink:"/docs/types/runes"},next:{title:"Arrays",permalink:"/docs/types/arrays"}},i={},p=[],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"numbers"},"Numbers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"a := 123\n")),(0,a.kt)("p",null,"This will assign the value of 123 to ",(0,a.kt)("inlineCode",{parentName:"p"},"a"),". By default ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," will have the\ntype ",(0,a.kt)("inlineCode",{parentName:"p"},"int"),"."),(0,a.kt)("p",null,"You can also use hexadecimal, binary or octal notation for integer literals:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"a := 0x7B\nb := 0b01111011\nc := 0o173\n")),(0,a.kt)("p",null,"All of these will be assigned the same value, 123. They will all have type\n",(0,a.kt)("inlineCode",{parentName:"p"},"int"),", no matter what notation you used."),(0,a.kt)("p",null,"V also supports writing numbers with ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," as separator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"num := 1_000_000 // same as 1000000\nthree := 0b0_11 // same as 0b11\nfloat_num := 3_122.55 // same as 3122.55\nhexa := 0xF_F // same as 255\noct := 0o17_3 // same as 0o173\n")),(0,a.kt)("p",null,"If you want a different type of integer, you can use casting:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"a := i64(123)\nb := u8(42)\nc := i16(12345)\n")),(0,a.kt)("p",null,"Assigning floating point numbers works the same way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"f := 1.0\nf1 := f64(3.14)\nf2 := f32(3.14)\n")),(0,a.kt)("p",null,"If you do not specify the type explicitly, by default float literals\nwill have the type of ",(0,a.kt)("inlineCode",{parentName:"p"},"f64"),"."),(0,a.kt)("p",null,"Float literals can also be declared as a power of ten:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"f0 := 42e1 // 420\nf1 := 123e-2 // 1.23\nf2 := 456e+2 // 45600\n")))}c.isMDXComponent=!0}}]);