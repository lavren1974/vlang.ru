"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[4075],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5458:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:10},i="Performance tuning",c={unversionedId:"advanced/performance-tuning",id:"advanced/performance-tuning",title:"Performance tuning",description:"The generated C code is usually fast enough, when you compile your code",source:"@site/docs/advanced/performance-tuning.md",sourceDirName:"advanced",slug:"/advanced/performance-tuning",permalink:"/docs/advanced/performance-tuning",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Conditional compilation",permalink:"/docs/advanced/conditional-compilation"},next:{title:"Compile-time reflection",permalink:"/docs/advanced/compile-time-reflection"}},l={},s=[],p={toc:s};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"performance-tuning"},"Performance tuning"),(0,o.kt)("p",null,"The generated C code is usually fast enough, when you compile your code\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"-prod"),". There are some situations though, where you may want to give\nadditional hints to the compiler, so that it can further optimize some\nblocks of code."),(0,o.kt)("p",null,"NB: These are ",(0,o.kt)("em",{parentName:"p"},"rarely")," needed, and should not be used, unless you\n",(0,o.kt)("em",{parentName:"p"},"profile your code"),', and then see that there are significant benefits for them.\nTo cite gcc\'s documentation: "programmers are notoriously bad at predicting\nhow their programs actually perform".'),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[inline]")," - you can tag functions with ",(0,o.kt)("inlineCode",{parentName:"p"},"[inline]"),", so the C compiler will\ntry to inline them, which in some cases, may be beneficial for performance,\nbut may impact the size of your executable."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"[direct_array_access]")," - in functions tagged with ",(0,o.kt)("inlineCode",{parentName:"p"},"[direct_array_access]"),"\nthe compiler will translate array operations directly into C array operations -\nomitting bounds checking. This may save a lot of time in a function that iterates\nover an array but at the cost of making the function unsafe - unless\nthe boundaries will be checked by the user."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"if _likely_(bool expression) {")," this hints the C compiler, that the passed\nboolean expression is very likely to be true, so it can generate assembly\ncode, with less chance of branch misprediction. In the JS backend,\nthat does nothing."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"if _unlikely_(bool expression) {")," similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"_likely_(x)"),", but it hints that\nthe boolean expression is highly improbable. In the JS backend, that does nothing."))}u.isMDXComponent=!0}}]);