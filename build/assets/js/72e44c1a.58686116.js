"use strict";(self.webpackChunkvlang_ru=self.webpackChunkvlang_ru||[]).push([[6837],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(y,s(s({ref:n},c),{},{components:t})):r.createElement(y,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9253:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:6},s="Maps",i={unversionedId:"types/maps",id:"types/maps",title:"Maps",description:"Maps can have keys of type string, rune, integer, float or voidptr.",source:"@site/docs/types/maps.md",sourceDirName:"types",slug:"/types/maps",permalink:"/docs/types/maps",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/types/maps.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Arrays",permalink:"/docs/types/arrays"},next:{title:"Modules",permalink:"/docs/modules"}},l={},p=[],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"maps"},"Maps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"mut m := map[string]int{} // a map with `string` keys and `int` values\nm['one'] = 1\nm['two'] = 2\nprintln(m['one']) // \"1\"\nprintln(m['bad_key']) // \"0\"\nprintln('bad_key' in m) // Use `in` to detect whether such key exists\nprintln(m.keys()) // ['one', 'two']\nm.delete('two')\n")),(0,a.kt)("p",null,"Maps can have keys of type string, rune, integer, float or voidptr."),(0,a.kt)("p",null,"The whole map can be initialized using this short syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"numbers := {\n    'one': 1\n    'two': 2\n}\nprintln(numbers)\n")),(0,a.kt)("p",null,"If a key is not found, a zero value is returned by default:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"sm := {\n    'abc': 'xyz'\n}\nval := sm['bad_key']\nprintln(val) // ''\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"intm := {\n    1: 1234\n    2: 5678\n}\ns := intm[3]\nprintln(s) // 0\n")),(0,a.kt)("p",null,"It's also possible to use an ",(0,a.kt)("inlineCode",{parentName:"p"},"or {}")," block to handle missing keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"mm := map[string]int{}\nval := mm['bad_key'] or { panic('key not found') }\n")),(0,a.kt)("p",null,"You can also check, if a key is present, and get its value, if it was present, in one go:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"m := {\n    'abc': 'def'\n}\nif v := m['abc'] {\n    println('the map value for that key is: $v')\n}\n")),(0,a.kt)("p",null,"The same optional check applies to arrays:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-v"},"arr := [1, 2, 3]\nlarge_index := 999\nval := arr[large_index] or { panic('out of bounds') }\nprintln(val)\n// you can also do this, if you want to *propagate* the access error:\nval2 := arr[333]?\nprintln(val2)\n")),(0,a.kt)("p",null,"Maps are ordered by insertion, like dictionaries in Python. The order is a\nguaranteed language feature. This may change in the future."))}u.isMDXComponent=!0}}]);